# SPDX-FileCopyrightText: 2025 Jonas Fierlings <fnoegip@gmail.com>
#
# SPDX-License-Identifier: 0BSD
#
# Requires [just](https://just.systems).

set unstable
set windows-shell := ["pwsh", "-C"]

CALL := if os_family() == "windows"  { "& " } else { "" }
HOST := "puck"
PROVISIONING_DIR := ".provisioning"
ROOT := ".." / ".."
SSH_HOSTKEY := "etc" / "ssh" / "ssh_host_ed25519_key"

# Recipe that is executed when no recipe is given on the commandline.
[private]
list:
    @{{ CALL }}{{ quote(just_executable()) }} --justfile {{ quote(source_file()) }} --list

import "../../scripts/provisioning.just"

[group('install')]
[script]
[unix]
[working-directory("../..")]
[doc('Prepare a fresh installation of the puck configuration by generating SSH keys and passwords.')]
prepare-install:
    just --justfile {{ quote(source_file()) }} generate-ssh-key {{ quote(HOST + " host key") }} {{ quote(absolute_path(ROOT / PROVISIONING_DIR / HOST / SSH_HOSTKEY)) }}
    just --justfile {{ quote(source_file()) }} update-sops-key {{ quote(HOST) }} {{ quote(absolute_path(ROOT / PROVISIONING_DIR / HOST / SSH_HOSTKEY + ".pub")) }} {{ quote(absolute_path(ROOT / ".sops.yaml")) }} {{ quote(absolute_path(ROOT / "hosts" / HOST / "secrets.yaml")) }}

[group('install')]
[unix]
[working-directory("../..")]
[doc('Install the puck configuration using nixos-anywhere.')]
install *ARGS: prepare-install
    nix run github:nix-community/nixos-anywhere -- \
        --print-build-logs \
        --flake {{ quote(".#" + HOST) }} \
        --extra-files {{ quote(absolute_path(ROOT / PROVISIONING_DIR / HOST)) }} \
        {{ ARGS }}

[group('deploy')]
[unix]
[working-directory("../..")]
[positional-arguments]
[doc('Remotely update the puck configuration.')]
update *ARGS="--remote-build":
    nix run github:serokell/deploy-rs -- {{ quote(".#" + HOST) }} "${@}"
